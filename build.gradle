import groovy.xml.MarkupBuilder

buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-snapshot' }
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.0.M5'
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'http://m2.neo4j.org/content/repositories/snapshots' }
        maven { url 'http://maven.restlet.com' }
    }

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    sourceCompatibility = '1.8'

    eclipse {
        project {
            name = project.name.replace('/', '-')
        }

        classpath {
            file {
                whenMerged { classpath ->
                    classpath.entries.removeAll { entry ->
                        entry.path.endsWith '.pom'
                    }
                }
            }
        }
    }

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web:1.3.0.M5') { // FIXME necessary?
            exclude module: 'spring-boot-starter-tomcat'
        }

        compile('org.springframework.data:spring-data-neo4j:4.1.0.BUILD-SNAPSHOT') {
            exclude module: 'logback-classic'
        }

        compile 'org.springframework.data:spring-data-elasticsearch:1.3.0.RELEASE',
                'com.google.guava:guava:18.0',
                'javax.inject:javax.inject:1',
                'joda-time:joda-time:2.8.2',
                'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.2'

        testCompile 'junit:junit:4.12',
                'org.easytesting:fest-assert-core:2.0M10'
    }
}

project(':service') {
    dependencies {
        compile project(':plugin/proteus')
    }
}

task eclipseLaunchConfiguration() << {
    file("$rootDir/Service.launch").withWriter { writer ->
        new MarkupBuilder(writer).launchConfiguration(type: 'org.eclipse.jdt.launching.localJavaApplication') {
            listAttribute(key: 'org.eclipse.debug.core.MAPPED_RESOURCE_PATHS') {
                listEntry value: '/service/src/main/java/de/tud/feedback/FeedbackService.java'
            }

            listAttribute(key: 'org.eclipse.debug.core.MAPPED_RESOURCE_TYPES') {
                listEntry value: '1'
            }

            listAttribute(key: 'org.eclipse.debug.ui.favoriteGroups') {
                listEntry value: 'org.eclipse.debug.ui.launchGroup.debug'
                listEntry value: 'org.eclipse.debug.ui.launchGroup.run'
            }

            stringAttribute key: 'org.eclipse.jdt.launching.MAIN_TYPE', value: 'de.tud.feedback.FeedbackService'
            stringAttribute key: 'org.eclipse.jdt.launching.PROJECT_ATTR', value: 'service'
        }
    }
}

task cleanEclipseLaunchConfiguration() << {
    file("$rootDir/Service.launch").delete()
}

eclipseProject.dependsOn eclipseLaunchConfiguration
cleanEclipse.dependsOn cleanEclipseLaunchConfiguration

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
    distributionUrl = 'http://services.gradle.org/distributions/gradle-2.6-all.zip'
}
