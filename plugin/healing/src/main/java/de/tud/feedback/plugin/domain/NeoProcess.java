package de.tud.feedback.plugin.domain;

import org.neo4j.ogm.annotation.GraphId;
import org.neo4j.ogm.annotation.Index;
import org.neo4j.ogm.annotation.NodeEntity;
import org.neo4j.ogm.annotation.Relationship;

/**
 * Should be a general process model. So in most cases this belongs to the instances (in PROtEUS)
 */
@NodeEntity
public class NeoProcess {

    @GraphId
    private Long id;

    @Index(unique=true)
    private String processId;
    private String name;
    private String state;
    private String processModelId;

    @Relationship(type = "BELONGS_TO", direction = Relationship.OUTGOING)
    private NeoProcess root;

    @Relationship(type = "RUNS_ON", direction = Relationship.OUTGOING)
    private NeoPeer peer;

    /**
     * Generated by framework
     *
     * @return
     */
    public Long getId() {
        return id;
    }

    /**
     * For PROtEUS we assume its something like this {PeerId}_{ProcessInstanceId} or
     * only {ProcessInstanceId} if the process is executed on the superpeer.
     */
    public String getProcessId() {
        return processId;
    }

    /**
     * For PROtEUS we assume its something like this {PeerId}_{ProcessInstanceId} or
     * only {ProcessInstanceId} if the process is executed on the superpeer.
     */
    public void setProcessId(String processId) {
        this.processId = processId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * E.g. finished, executing, ...
     */
    public String getState() {
        return state;
    }

    /**
     * E.g. finished, executing, ...
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * The peer on which the process is executing
     */
    public NeoPeer getPeer() {
        return peer;
    }

    /**
     * The peer on which the process is executing
     */
    public void setPeer(NeoPeer peer) {
        this.peer = peer;
    }

    /**
     * The root process for this process (in case, this is a subprocess)
     */
    public NeoProcess getRoot() {
        return root;
    }

    /**
     * The root process for this process (in case, this is a subprocess)
     */
    public void setRoot(NeoProcess root) {
        this.root = root;
    }

    /**
     * The model id of the process (no instance and no root id)
     */
    public String getProcessModelId() {
        return processModelId;
    }

    /**
     * The model id of the process (no instance and no root id)
     */
    public void setProcessModelId(String processModelId) {
        this.processModelId = processModelId;
    }

}
