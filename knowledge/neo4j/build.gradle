buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:2.0.0'
    }
}

ant.condition(property: "os", value: "windows") { os(family: "windows") }
ant.condition(property: "os", value: "unix"   ) { os(family: "unix")    }

apply plugin: 'java'
apply plugin: 'de.undercouch.download'

def os() { ant.properties.os }
def isWindows() { os() == 'windows' }

def buildDir  = file("$buildDir")
def serverDir = file("$buildDir/neo4j")
def dataDir   = file("$rootDir/data/neo4j")
def archive   = file("$buildDir/neo4j" + (isWindows() ? '.zip' : '.tar.gz'))
def binary    = file("$buildDir/neo4j/neo4j-community-2.2.5/bin/neo4j" + (isWindows() ? '.bat' : ''))
def config    = file("$buildDir/neo4j/neo4j-community-2.2.5/conf/neo4j-server.properties")
def propsFile = file("$buildDir/generated-resources/neo4j.properties")
def generated = file("$buildDir/generated-resources")

if (!buildDir.exists())
    buildDir.mkdir()

if (!generated.exists())
    generated.mkdir()

if (!propsFile.exists())
    propsFile.createNewFile()

sourceSets.main {
    output.dir(generated, builtBy: 'generateProperties')
}

task fetch() {
    if (!archive.exists()) {
        download {
            dest archive
            src isWindows() \
                ? 'http://neo4j.com/artifact.php?name=neo4j-community-2.2.5-windows.zip' \
                : 'http://neo4j.com/artifact.php?name=neo4j-community-2.2.5-unix.tar.gz'
        }
    }
}

task prepare(dependsOn: fetch) {
    if (!serverDir.exists()) {
        copy {
            from isWindows() ? zipTree(archive) : tarTree(archive)
            into serverDir
        }
    }

    ant.replace(file: config,
            token: 'org.neo4j.server.database.location=data/graph.db',
            value: 'org.neo4j.server.database.location=' + dataDir
    )

    ant.replace(file: config,
            token: 'dbms.security.auth_enabled=true',
            value: 'dbms.security.auth_enabled=false'
    )
}

task generateProperties(dependsOn: prepare) {
    def writer = new FileWriter(propsFile)
    def props = new Properties();

    props.put("service.knowledge.neo4j.binary", binary.absolutePath)

    try {
        props.store(writer, null)
        writer.flush()
    } finally {
        writer.close()
    }
}

fetch.group =
prepare.group =
generateProperties.group =
    'server'

